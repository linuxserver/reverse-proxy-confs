name: Check Samples

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]

jobs:
  check-allowed-file-names:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3.4.0

      - name: Check Allowed File Names
        run: |
          NOT_SAMPLES=$(find . -not -path '*/\.*' -type f ! \( -name '*.conf.sample' -o -name 'README.md' -o -name 'LICENSE' \))
          NOT_SAMPLES_COUNT=$(echo "${NOT_SAMPLES}" | wc -w)
          if (( NOT_SAMPLES_COUNT > 0 )); then
              for i in ${NOT_SAMPLES}; do
                echo "::error file=${i},line=1,title=Disallowed filenames::This file extension is not allowed, only .sample is allowed"
              done
              exit 1
          fi

      - name: Check Executable Bit
        run: |
          EXECUTABLE_BIT=$(find . -not -path '*/\.*' -type f -executable)
          EXECUTABLE_BIT_COUNT=$(echo "${EXECUTABLE_BIT}" | wc -w)
          if (( EXECUTABLE_BIT_COUNT > 0 )); then
              for i in ${EXECUTABLE_BIT}; do
                echo "::error file=${i},line=1,title=Executable Bit::This file is set as exectutable, which is not allowed"
              done
              exit 1
          fi

      - name: Check Line Endings
        run: |
          CRLF_ENDINGS=$(find . -not -path '*/\.*' -type f -exec file "{}" ";" | grep CRLF || true)
          CRLF_ENDINGS_COUNT=$(echo "${CRLF_ENDINGS}" | wc -w)
          if (( CRLF_ENDINGS_COUNT > 0 )); then
              for i in ${CRLF_ENDINGS}; do
                echo "::error file=${i},line=1,title=Line Endings::This file has CRLF (Windows) line endings, which is not allowed"
              done
              exit 1
          fi

      - name: Check Version Date Line Exists
        run: |
          # Date regex based on https://www.html5pattern.com/Dates
          VERSION_LINE_MISSING=$(find . -not -path '*/\.*' -type f -name '*.conf.sample' -exec grep -H -c -P '^## Version (?:19|20|21)[0-9]{2}/(?:(?:0[1-9]|1[0-2])/(?:0[1-9]|1[0-9]|2[0-9])|(?:(?!02)(?:0[1-9]|1[0-2])/(?:30))|(?:(?:0[13578]|1[02])/31))$' {} \; | grep 0$ | cut -d':' -f1)
          VERSION_LINE_MISSING_COUNT=$(echo "${VERSION_LINE_MISSING}" | wc -w)
          if (( VERSION_LINE_MISSING_COUNT > 0 )); then
              for i in ${VERSION_LINE_MISSING}; do
                echo "::error file=${i},line=1,title=Version Line::This file is missing the version date line or it is not formatted correctly (YYYY/MM/DD)"
              done
              exit 1
          fi
